syntax = "proto3";

package game;

option go_package = "simple-grpc-game/gen/go/game";

// Represents a player in the game
message Player {
  string id = 1; // Unique player identifier
  float x_pos = 2;
  float y_pos = 3;
  AnimationState current_animation_state = 4;
  string username = 5;
}

// Represents the entire game state (used internally by client/server now, not sent directly)
message GameState {
  repeated Player players = 1; // List of all players currently in the game
}

// Input from a client (e.g., movement direction)
message PlayerInput {
  enum Direction {
    UNKNOWN = 0;
    UP = 1;
    DOWN = 2;
    LEFT = 3;
    RIGHT = 4;
  }
  Direction direction = 1; // Could add delta time or magnitude later
}

// Represents a row of tiles in the map
message MapRow {
  repeated int32 tiles = 1; // Use int32 for tile IDs
}

// Data sent once when a client connects
message InitialMapData {
  repeated MapRow rows = 1;
  int32 tile_width = 2;
  int32 tile_height = 3;
  float world_pixel_height = 4;
  float world_pixel_width = 5;
  int32 tile_size_pixels = 6;
  string assigned_player_id = 7;
}

// NEW: Represents changes to the game state
message DeltaUpdate {
  repeated Player updated_players = 1;    // Players added or whose state changed
  repeated string removed_player_ids = 2; // IDs of players who left
  // Optional: uint64 sequence_number = 3; // For handling out-of-order/missed packets
}

message ChatMessage {
  string sender_username = 1;
  string message_text = 2;
  int64 timestamp = 3; // Timestamp of when the message was sent
  string player_id = 4; // ID of the player who sent the message
}

// Message sent from Server to Client
message ServerMessage {
  oneof message {
    InitialMapData initial_map_data = 1;
    // GameState game_state = 2; // REMOVED
    DeltaUpdate delta_update = 3; // ADDED
    ChatMessage chat_message = 4;
  }
}

message ClientHello {
  string desired_username = 1; // The username the client wants to use
}

message SendChatMessageRequest {
  string message_text = 1;
}

message ClientMessage {
  oneof payload {
    PlayerInput player_input = 1; // Player input message
    ClientHello client_hello = 2; // Client hello message
    SendChatMessageRequest send_chat_message = 3;
  }
}

// Animation states for the player character
enum AnimationState {
  UNKNOWN_STATE = 0;
  IDLE = 1;
  RUNNING_UP = 2;
  RUNNING_DOWN = 3;
  RUNNING_LEFT = 4;
  RUNNING_RIGHT = 5;
}


// The gRPC service definition - Using Bidirectional Stream
service GameService {
  // A bidirectional stream for real-time game updates and input
  rpc GameStream (stream ClientMessage) returns (stream ServerMessage);
}
